#!/usr/bin/env bash

# save file and swap file (used to make edits)
save="tasks.txt"
swap="tasks.txt.swp"

# display marks
prompt="> "
branch="â””"

# indicator marks
CLOSED='x'
OPEN=' '
SEMICLOSED='-'
ACTIVE='\*'

# indicator colors (doubled escaped for sed)
CLOSED_COLOR='\\033[0;32m' # green
OPEN_COLOR='\\033[0;31m' # red
SEMICLOSED_COLOR='\\033[0;33m' # yellow
ACTIVE_COLOR='\\033[0m' # no color
NO_COLOR='\\033[0m' # reset color

# regexes used to maintain task list
instruction='[a-zA-Z0-9, -]+'                    # valid command
indicator="[$CLOSED$OPEN$SEMICLOSED$ACTIVE]"     # status indicator
branches=" *$branch?"                            # indentation (for subtasks)
prefix="$indicator $branches"                    # everything before the task name
taskname='[a-zA-Z0-9,-]+'                        # task name
progress='\([0-9]+ of [0-9]+ min\)'              # completion status
progress_grouped='\(([0-9]+) of ([0-9]+) min\)'
timestamp='\{[0-9]+\}'                           # used internally to track completion status
timestamp_grouped='\{([0-9]+)\}' 
metadata="$progress $timestamp"                  # everything after the task name
entry="$prefix$taskname $metadata"               # a well-formed line of $save

# ---------------------------------------------------------------------------

# check that string $1 matches regex $2
function verify() {
  check=$(echo $1 | sed -E -e "s/$2//")
  if [ "$check" != "" ]; then
    echo "The string '$1' is invalid (does not match the regex '$2')."
    (exit 1)
  else
    (exit 0)
  fi
}

# check that the number $1 (given) is equal to $2 (expected).
# print $3 indicating proper usage if not
function verify_usage() {
  if [ "$1" -ne "$2" ]; then
    echo "Expected $2 argument(s) but got $1."
    echo "Usage: $3"
    (exit 1)
  else
    (exit 0) 
  fi
}

# apply sed command $1 to the task list
function sedit() {
  cat "$save" | sed -E -e "$1" > "$swap"
  cp "$swap" "$save"
}

# ---------------------------------------------------------------------------

# check that task $1 exists (sets errorlevel to 1 if not, 0 otherwise)
function exists() {
  lines=$(cat "$save" | grep -E "$prefix$1 $metadata")
  if [ "$lines" == "" ]; then
    (exit 1)
  else
    (exit 0)
  fi
}

# get state of task $1
function state() {
  cat "$save" | tr '\n' ';' | \
    sed -E -e "s/.*($indicator) $branches$1 $progress $timestamp.*/\\1/"
}

# get indentation whitespace of task $1
# the branch character is considered part of the indentation
# e.g. "  ." would be have indentation "   " where "." is the branch character
function indentspace() {
  echo > "$swap"
  cat "$swap" "$save" | tr '\n' ';' | \
    sed -E -e "s/.*;$indicator ($branches)$1 $progress $timestamp.*/\\1/" | \
    sed -E -e "s/$branch/ /g"
}

# get timestamp of task $1
function timestamp() {
  cat "$save" | tr '\n' ';' | \
    sed -E -e "s/.*$prefix$1 $progress $timestamp_grouped.*/\\1/"
}

# get time spent (in minutes) on task $1 so far
function spent() {
  cat "$save" | tr '\n' ';' | \
    sed -E -e "s/.*$prefix$1 $progress_grouped $timestamp_grouped.*/\\1/"
}

# get time allocated (in minutes) for task $1
function allocated() {
  cat "$save" | tr '\n' ';' | \
    sed -E -e "s/.*$prefix$1 $progress_grouped $timestamp_grouped.*/\\2/"
}

# ---------------------------------------------------------------------------

# set timestamp and progress of task $1, assuming that it's active
function update_task() {
  old_stamp=$(timestamp "$1")
  old_spent=$(spent "$1")
  new_stamp=$(date +%s)
  new_spent=$(echo "($old_spent*60 + ($new_stamp - $old_stamp)) / 60" | bc)

  # error is subtracted from the old stamp to maintain precision on the order of seconds
  # otherwise, calling update_task() at a 59 second interval would discard almost 1 full minute of time
  error=$(echo "($new_stamp - $old_stamp) % 60" | bc)
  new_stamp=$(echo "$new_stamp - $error" | bc)

  sedit "s/($prefix$1) $progress_grouped $timestamp/\\1 ($new_spent of \\3 min) {$new_stamp}/g"
}

# set timestamp of task $1 to now
function update_stamp() {
  new_stamp=$(date +%s)
  sedit "s/($prefix$1 $progress) $timestamp/\\1 {$new_stamp}/g"
}

# update timestamp and progress of active task
function update() {
  flattened="$(cat "$save" | tr '\n' ';')"
  task="$(echo "$flattened" | sed -E -e "s/.*$ACTIVE $branches($taskname) $metadata.*/\\1/")"
  if [ "$flattened" == "$task" ]; then
    # no active task
    return
  fi
  update_task "$task"
}

# mark a task with name $1 as $2
function mark() {
  sedit "s/$indicator ($branches$1 $metadata)/$2 \\1/g"
}

# collapse all tasks and subtasks with indentation at least $1 onto a single line
function collapse() {
  if [ "$1" == "" ]; then
    anyindent=""
  else
    anyindent="$(echo "$1" | sed -E "s/ /( |$branch)?/g")"
  fi
  parent="$indicator $anyindent$taskname $metadata"
  child="$indicator $1 *$branch$taskname $metadata"
  echo -e "$(cat "$save" | tr '\n' ';' | \
    sed -E -e "s/($parent(;$child)*);/\\1\\\\n/g")" > "$swap"
  cp "$swap" "$save"
}

# expand collapsed subtasks onto their own lines
function expand() {
  echo -e "$(cat "$save" | tr ';' '\n')" > "$swap"
  cp "$swap" "$save"
}

# ---------------------------------------------------------------------------

# list all tasks
function list() {
  #closed, open, semiclosed, active
  echo -e "$(cat "$save" | sed -E -e "s/ $timestamp//g" | \
    sed -E -e "s/(^$CLOSED $branches$taskname $progress)/$CLOSED_COLOR\\1/g" | \
    sed -E -e "s/(^$SEMICLOSED $branches$taskname $progress)/$SEMICLOSED_COLOR\\1/g" | \
    sed -E -e "s/(^$ACTIVE $branches$taskname $progress)/$ACTIVE_COLOR\\1/g" | \
    sed -E -e "s/(^$OPEN $branches$taskname $progress)/$OPEN_COLOR\\1/g" | \
    sed -E -e "s/($progress)/\\1$NO_COLOR/g")"
}

# add a task with name $1 and time allocation $2 (in minutes)
function add() {
  if verify "$1" "$taskname"; then
    if exists "$1"; then
      echo "Task '$1' already exists."
      return
    fi
    if verify "$2" "[0-9]+"; then
      echo "$OPEN $1 (0 of $2 min) {$(date +%s)}" >> "$save"
    fi
  fi
}

# delete task with name $1 and any subtasks
function delete() {
  if verify "$1" "$taskname"; then
    if ! exists "$1"; then
      echo "Task '$1' doesn't exist."
      return
    fi
    indent="$(indentspace $1)"
    collapse "$indent"
    sedit "/$prefix$1 $metadata.*/d"
    expand
  fi
}

# adjust task $1 to take $2 minutes
function realloc() {
  if verify "$1" "$taskname"; then
    if ! exists "$1"; then
      echo "Task '$1' doesn't exist."
      return
    fi 
    if verify "$2" "[0-9]+"; then
      sedit "s/($prefix$1) $progress_grouped ($timestamp)/\\1 (\\2 of $2 min) \\4/g"
    fi
  fi
}

# rename task $1 to $2
function rename() {
  if verify "$1" "$taskname"; then
    if ! exists "$1"; then
      echo "Task '$1' doesn't exist."
      return
    fi
    if verify "$2" "$taskname"; then 
      if exists "$2"; then
        echo "Task '$2' already exists."
        return
      fi
      sedit "s/($prefix)$1 ($metadata)/\\1$2 \\2/g"
    fi
  fi
}

# create subtask $2 of task $1 to take $3 minutes
function branch() {
  if verify "$1" "$taskname"; then
    if ! exists "$1"; then
      echo "Task '$1' doesn't exist."
      return
    fi
    if verify "$2" "$taskname"; then 
      if exists "$2"; then
        echo "Task '$2' already exists."
        return
      fi
      if verify "$3" "[0-9]+"; then
        indent=$(indentspace "$1")
        sedit "s/($prefix$1 $metadata)/\\1\n  $indent$branch$2 (0 of $3 min) {$(date +%s)}/g"
      fi
    fi
  fi
}

# delete all tasks (and their children) marked as closed
function purge() {
  # preserve subtrees
  collapse

  printf "" > "$swap"
  grep -v -E "^$CLOSED" "$save" >> "$swap"
  cp "$swap" "$save"

  expand
}

# mark task with name $1 as closed
function close() {
  if verify "$1" "$taskname"; then
    if ! exists "$1"; then
      echo "Task '$1' doesn't exist."
      return
    fi
    mark "$1" "$CLOSED"
  fi
}

# mark closed task $1 as semiclosed
function unclose() {
  if verify "$1" "$taskname"; then
    if ! exists "$1"; then
      echo "Task '$1' doesn't exist."
      return
    fi
    stat="$(state "$1")"
    if [ "$stat" != "$CLOSED" ]; then
      echo "Task '$1' isn't closed."
      return
    fi
    mark "$1" "$SEMICLOSED"
  fi
}


# mark active task as semi-closed
function idle() {
  update
  sedit "s/$ACTIVE ($branches$taskname $metadata)/$SEMICLOSED \\1/g"
}

# set task with name $1 to be active
function go() {
  if verify "$1" "$taskname"; then
    if ! exists "$1"; then
      echo "Task '$1' doesn't exist."
      return
    fi
    idle
    update_stamp "$1"
    mark "$1" "$ACTIVE"
  fi
}

# sort task list
function sort_list() {
  # preserve subtrees
  collapse

  # sort by status, then alphanumerically
  printf "" > "$swap"
  grep -E "^$CLOSED" "$save" | sort >> "$swap"
  grep -E "^$SEMICLOSED" "$save" | sort >> "$swap"
  grep -E "^$OPEN" "$save" | sort >> "$swap"
  grep -E "^$ACTIVE" "$save" | sort >> "$swap"
  cp "$swap" "$save"

  # restore subtrees
  expand
}

# evaluate a command $1 with arguments $2 $3 ...
function evaluate() {
  argc=$(echo $#-1 | bc)
  case "$1" in
  l|list)
    if verify_usage $argc 0 "list"; then
      update
      list
    fi
    ;;
  a|add)
    if verify_usage $argc 2 "add name minutes"; then
      add "$2" "$3"
    fi
    ;;
  d|delete)
    if verify_usage $argc 1 "delete name"; then
      delete "$2"
    fi
    ;;
  r|realloc)
    if verify_usage $argc 2 "realloc name minutes"; then
      realloc "$2" "$3"
    fi
    ;;
  m|rename)
    if verify_usage $argc 2 "rename old new"; then
      rename "$2" "$3"
    fi
    ;;
  b|branch)
    if verify_usage $argc 3 "branch parent child minutes"; then
      branch "$2" "$3" "$4"
    fi
    ;;
  p|purge)
    if verify_usage $argc 0 "purge"; then
      purge
    fi
    ;;
  c|close)
    if verify_usage $argc 1 "close name"; then
      close "$2"
    fi
    ;;
  u|unclose)
    if verify_usage $argc 1 "unclose name"; then
      unclose "$2"
    fi
    ;;
  i|idle)
    if verify_usage $argc 0 "idle"; then
      idle
    fi
    ;;
  s|sort)
    if verify_usage $argc 0 "sort"; then
      sort_list
    fi
    ;;
  g|go)
    if verify_usage $argc 1 "go name"; then
      go "$2"
    fi
    ;;
  cl|clear)
    if verify_usage $argc 0 "clear"; then
      clear
    fi
    ;;
  raw)
    if verify_usage $argc 0 "raw"; then
      vim "$save"
    fi
    ;;
  h|help)
    echo "Commands:"
    echo "  l, list: list all tasks"
    echo "  a, add: add task to list"
    echo "  d, delete: delete task from list"
    echo "  re, realloc: adjust estimated task duration"
    echo "  m, rename: rename a task"
    echo "  b, branch: create a subtask"
    echo "  p, purge: delete all closed tasks from list"
    echo "  c, close: mark task as closed"
    echo "  u, unclose: unclose a task"
    echo "  i, idle: pause active task"
    echo "  s, sort: sort task list"
    echo "  g, go: set new active task"
    echo "  cl, clear: clear screen"
    echo "  raw: open task list in vim"
    echo "  h, help: show this text"
    echo "  q, quit: quit"
    echo "purge, idle, sort, clear, help, raw, and exit take no arguments."
    echo "Enter any of the other commands without any arguments for usage details."
    ;;
  q|quit)
    if verify_usage $argc 0 "quit"; then
      exit
    fi
    ;;
  '')
    ;;
  *)
    echo "Unknown command '$1'"
    ;;
  esac
}

# ---------------------------------------------------------------------------

while : ; do
  read -p "$prompt" cmd

  if verify "$cmd" "$instruction"; then
    # eval is used to tokenize $cmd
    eval 'evaluate '$cmd
  fi
done

